import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { ColorController } from 'lil-gui';
import { fetchCount } from './counterAPI';

const initialState = {
  user: {},
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const loadUser = createAsyncThunk('user/loadUser', () => {
  return fetch("/me")
  .then(resp => resp.json())
  .then(json => {
    console.log(json)
    return json
  });
  }
);

export const signOut = createAsyncThunk('user/signOut', () => {
  return fetch("/signout", {
    method: "DELETE",
  })
  }
);
  

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: {
    [loadUser.fulfilled]: (state, action) => {
      state.loading = "";
      state.user = action.payload;
      console.log("state.user: ", state.user);
    },

    [signOut.pending]: state => {
      state.loading = "yes";
    },
    [signOut.rejected]: (state, action) => {
      state.loading = "";
      state.error = action.error.message;
    },
    [signOut.fulfilled]: (state, action) => {
      state.loading = "";
      state.user = {};
      console.log("state.user: ", state.user);
    }
},
});

//export const { loadUser } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state) => state.user;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default userSlice.reducer;
